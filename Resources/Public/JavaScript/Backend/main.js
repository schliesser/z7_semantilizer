import $ from 'jquery';
import Notification from '@typo3/backend/notification.js';

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
exports.Semantilizer = void 0;
console.log(23349);



  Notification.success('Success', 'This flash message was sent via JavaScript', 5);
var Semantilizer = function Semantilizer(url, elementId, contentSelectors) {
    _classCallCheck(this, Semantilizer);


    console.log(url, elementId, contentSelectors);
};

exports.Semantilizer = Semantilizer;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJSZXNvdXJjZXMvUHJpdmF0ZS9KYXZhU2NyaXB0L0JhY2tlbmQvU2VtYW50aWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBRUEsUUFBUSxHQUFSLENBQVksS0FBWjs7SUFDYSxZLEdBQ1gsc0JBQVksR0FBWixFQUF5QixTQUF6QixFQUE0QyxnQkFBNUMsRUFBc0U7QUFBQTs7QUFDcEUsWUFBUSxHQUFSLENBQVksR0FBWixFQUFpQixTQUFqQixFQUE0QixnQkFBNUI7QUFDRCxDOztBQUhILFFBQUEsWUFBQSxHQUFBLFlBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvLyBpbXBvcnQge0hlYWRsaW5lfSBmcm9tIFwiLi9DbGFzc2VzL0hlYWRsaW5lXCI7XG4vLyBpbXBvcnQge01vZHVsZX0gZnJvbSBcIi4vQ2xhc3Nlcy9Nb2R1bGVcIjtcbi8vIGltcG9ydCB7Tm90aWZpY2F0aW9ufSBmcm9tIFwiLi9DbGFzc2VzL05vdGlmaWNhdGlvblwiO1xuLy8gaW1wb3J0IHtDb252ZXJ0ZXJ9IGZyb20gXCIuL0NsYXNzZXMvQ29udmVydGVyXCI7XG4vL1xuLy8gZGVjbGFyZSBnbG9iYWwge1xuLy8gICBpbnRlcmZhY2UgV2luZG93IHtcbi8vICAgICBUWVBPMzogYW55W11cbi8vICAgfVxuLy8gfVxuLy9cbi8vIGV4cG9ydCBjbGFzcyBTZW1hbnRpbGl6ZXIge1xuLy8gICBwcml2YXRlIHJlYWRvbmx5IHVybDogc3RyaW5nO1xuLy8gICBwcml2YXRlIHJlYWRvbmx5IGNvbnRlbnRTZWxlY3RvcnM6IGFueVtdO1xuLy8gICBwdWJsaWMgcmVhZG9ubHkgbW9kdWxlOiBNb2R1bGU7XG4vLyAgIHB1YmxpYyByZWFkb25seSBub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbjtcbi8vICAgcHVibGljIHJlYWRvbmx5IGhlYWRsaW5lcyA9IEhlYWRsaW5lW107XG4vL1xuLy8gICBjb25zdHJ1Y3Rvcih1cmw6IHN0cmluZywgZWxlbWVudElkOiBzdHJpbmcsIGNvbnRlbnRTZWxlY3RvcnM6IHN0cmluZ1tdKSB7XG4vLyAgICAgdGhpcy51cmwgPSB1cmw7XG4vLyAgICAgdGhpcy5jb250ZW50U2VsZWN0b3JzID0gQ29udmVydGVyLnRvQXJyYXkoY29udGVudFNlbGVjdG9ycyk7XG4vLyAgICAgdGhpcy5tb2R1bGUgPSBuZXcgTW9kdWxlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCksIHRoaXMpO1xuLy8gICAgIHRoaXMubm90aWZpY2F0aW9uID0gbmV3IE5vdGlmaWNhdGlvbih0aGlzKTtcbi8vICAgICB0aGlzLmhlYWRsaW5lcyA9IFtdO1xuLy9cbi8vICAgICAvLyBCaW5kIG1ldGhvZHNcbi8vICAgICB0aGlzLnZhbGlkYXRlID0gdGhpcy52YWxpZGF0ZS5iaW5kKHRoaXMpO1xuLy9cbi8vICAgICB0aGlzLmluaXQoKTtcbi8vICAgfVxuLy9cbi8vICAgcHJpdmF0ZSBjb2xsZWN0KGNhbGxiYWNrKTogdm9pZCB7XG4vLyAgICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbi8vXG4vLyAgICAgLy8gQ2xlYXIgaGVhZGxpbmVzXG4vLyAgICAgdGhpcy5oZWFkbGluZXMubGVuZ3RoID0gMDtcbi8vXG4vLyAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4vLyAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlID09PSA0KSB7XG4vLyAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMjAwKSB7XG4vL1xuLy8gICAgICAgICAgIC8vIFBhcnNlIGRvY3VtZW50XG4vLyAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuLy8gICAgICAgICAgIGNvbnN0IGRvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcocmVxdWVzdC5yZXNwb25zZVRleHQsICd0ZXh0L2h0bWwnKTtcbi8vXG4vLyAgICAgICAgICAgLy8gRmluZCBoZWFkbGluZXMgaW4gY29udGVudHNcbi8vICAgICAgICAgICB0aGlzLmNvbnRlbnRTZWxlY3RvcnMubWFwKHNlbGVjdG9yID0+IGRvYy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSkuZmlsdGVyKGNvbnRhaW5lciA9PiBjb250YWluZXIpLmZvckVhY2goY29udGFpbmVyID0+IHtcbi8vICAgICAgICAgICAgIHRoaXMuaGVhZGxpbmVzLnB1c2goLi4uQ29udmVydGVyLnRvQXJyYXkoKGNvbnRhaW5lciB8fCBkb2MpLnF1ZXJ5U2VsZWN0b3JBbGwoJ2gxLCBoMiwgaDMsIGg0LCBoNSwgaDYnKSkubWFwKG5vZGUgPT4gbmV3IEhlYWRsaW5lKG5vZGUsIHRoaXMpKSk7XG4vLyAgICAgICAgICAgfSk7XG4vLyAgICAgICAgIH1cbi8vXG4vLyAgICAgICAgIC8vIFJ1biBjYWxsYmFjayBmdW5jdGlvblxuLy8gICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4vLyAgICAgICAgICAgY2FsbGJhY2socmVxdWVzdCk7XG4vLyAgICAgICAgIH1cbi8vICAgICAgIH1cbi8vICAgICB9O1xuLy9cbi8vICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsICh0aGlzLnVybC5pbmRleE9mKCcjJykgPCAwID8gdGhpcy51cmwgOiB0aGlzLnVybC5zdWJzdHIoMCwgdGhpcy51cmwuaW5kZXhPZignIycpKSkgKyAnIycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSwgdHJ1ZSk7XG4vLyAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdYLVNlbWFudGlsaXplcicsICd0cnVlJyk7XG4vLyAgICAgcmVxdWVzdC5zZW5kKCk7XG4vLyAgIH1cbi8vXG4vLyAgIHByaXZhdGUgdmFsaWRhdGVTdHJ1Y3R1cmUoKTogdm9pZCB7XG4vLyAgICAgdGhpcy5oZWFkbGluZXMuZm9yRWFjaChoZWFkbGluZSA9PiBoZWFkbGluZS5pc3N1ZXMuY2xlYXIoKSk7XG4vL1xuLy8gICAgIGNvbnN0IHZhbGlkYXRlTWFpbkhlYWRpbmdzID0gKCkgPT4ge1xuLy8gICAgICAgY29uc3QgZmlyc3RIZWFkbGluZSA9IHRoaXMuaGVhZGxpbmVzWzBdO1xuLy8gICAgICAgY29uc3QgbWFpbkhlYWRsaW5lcyA9IHRoaXMuaGVhZGxpbmVzLmZpbHRlcihoZWFkbGluZSA9PiBoZWFkbGluZS50eXBlID09PSAxKTtcbi8vXG4vLyAgICAgICBpZiAobWFpbkhlYWRsaW5lcy5sZW5ndGggPT09IDApIHtcbi8vICAgICAgICAgZmlyc3RIZWFkbGluZS5pc3N1ZXMuYWRkKCdtYWluSGVhZGluZ1JlcXVpcmVkJywgMSk7XG4vLyAgICAgICB9XG4vL1xuLy8gICAgICAgaWYgKG1haW5IZWFkbGluZXMubGVuZ3RoID4gMSkge1xuLy8gICAgICAgICB0aGlzLmhlYWRsaW5lcy5mb3JFYWNoKChoZWFkbGluZSwgaSkgPT4ge1xuLy8gICAgICAgICAgIGlmIChoZWFkbGluZS50eXBlID09PSAxKSB7XG4vLyAgICAgICAgICAgICBoZWFkbGluZS5pc3N1ZXMuYWRkKCdtYWluSGVhZGluZ051bWJlcicsIGkgPyAyIDogbnVsbCk7XG4vLyAgICAgICAgICAgfVxuLy8gICAgICAgICB9KTtcbi8vICAgICAgIH1cbi8vXG4vLyAgICAgICBpZiAobWFpbkhlYWRsaW5lcy5sZW5ndGggPT09IDEgJiYgZmlyc3RIZWFkbGluZS50eXBlICE9PSAxKSB7XG4vLyAgICAgICAgIGZpcnN0SGVhZGxpbmUuaXNzdWVzLmFkZCgnbWFpbkhlYWRpbmdQb3NpdGlvbicsIDEpO1xuLy9cbi8vICAgICAgICAgdGhpcy5oZWFkbGluZXMuZm9yRWFjaCgoaGVhZGxpbmUsIGkpID0+IHtcbi8vICAgICAgICAgICBpZiAoaSAmJiBoZWFkbGluZS50eXBlID09PSAxKSB7XG4vLyAgICAgICAgICAgICBoZWFkbGluZS5pc3N1ZXMuYWRkKCdtYWluSGVhZGluZ1Bvc2l0aW9uJywgMik7XG4vLyAgICAgICAgICAgfVxuLy8gICAgICAgICB9KTtcbi8vICAgICAgIH1cbi8vICAgICB9O1xuLy9cbi8vICAgICBjb25zdCB2YWxpZGF0ZVN0cnVjdHVyZSA9ICgpID0+IHtcbi8vICAgICAgIHRoaXMuaGVhZGxpbmVzLmZvckVhY2goKGhlYWRsaW5lLCBpKSA9PiB7XG4vLyAgICAgICAgIGlmIChpICYmIGhlYWRsaW5lLnR5cGUgPiB0aGlzLmhlYWRsaW5lc1tpIC0gMV0udHlwZSArIDEpIHtcbi8vICAgICAgICAgICBoZWFkbGluZS5pc3N1ZXMuYWRkKCdoZWFkaW5nU3RydWN0dXJlJyk7XG4vLyAgICAgICAgIH1cbi8vICAgICAgIH0pO1xuLy8gICAgIH07XG4vL1xuLy8gICAgIGlmICh0aGlzLmhlYWRsaW5lcy5sZW5ndGgpIHtcbi8vICAgICAgIHZhbGlkYXRlTWFpbkhlYWRpbmdzKCk7XG4vLyAgICAgICB2YWxpZGF0ZVN0cnVjdHVyZSgpO1xuLy8gICAgIH1cbi8vICAgfVxuLy9cbi8vICAgcHJpdmF0ZSB2YWxpZGF0ZSgpOiB2b2lkIHtcbi8vICAgICB0aGlzLnZhbGlkYXRlU3RydWN0dXJlKCk7XG4vLyAgICAgdGhpcy5tb2R1bGUuZHJhd1N0cnVjdHVyZSgpO1xuLy8gICAgIHRoaXMubm90aWZpY2F0aW9uLmhpZGVBbGwoKTtcbi8vICAgICB0aGlzLm5vdGlmaWNhdGlvbi5hdXRvbG9hZC5lbmFibGVkKCkgJiYgdGhpcy5ub3RpZmljYXRpb24uc2hvd0lzc3VlcygpO1xuLy8gICB9XG4vL1xuLy8gICBwcml2YXRlIHJlZnJlc2gobG9jaz86IGJvb2xlYW4pOiB2b2lkIHtcbi8vICAgICBsb2NrID09PSB0cnVlICYmIHRoaXMubW9kdWxlLmxvY2tTdHJ1Y3R1cmUoKTtcbi8vXG4vLyAgICAgdGhpcy5jb2xsZWN0KHJlcXVlc3QgPT4ge1xuLy8gICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtcbi8vICAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuLy8gICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgdGhpcy5ub3RpZmljYXRpb24uaGlkZUFsbCgpO1xuLy8gICAgICAgICB0aGlzLm1vZHVsZS5kcmF3RXJyb3IoKTtcbi8vICAgICAgIH1cbi8vICAgICB9KTtcbi8vICAgfVxuLy9cbi8vICAgcHJpdmF0ZSByZXZhbGlkYXRlKGhhcmQpOiB2b2lkIHtcbi8vICAgICBpZiAoaGFyZCkge1xuLy8gICAgICAgdGhpcy5tb2R1bGUuZHJhd1N0cnVjdHVyZSgpO1xuLy8gICAgICAgdGhpcy5ub3RpZmljYXRpb24uaGlkZUFsbCgpO1xuLy8gICAgICAgdGhpcy5yZWZyZXNoKHRydWUpO1xuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4vLyAgICAgfVxuLy8gICB9XG4vL1xuLy8gICBwcml2YXRlIGluaXQoKTogdm9pZCB7XG4vLyAgICAgdGhpcy5yZWZyZXNoKCk7XG4vL1xuLy8gICAgIC8vIEFkZCBsb2FkZXJcbi8vICAgICB0aGlzLm1vZHVsZS5sb2FkZXIoKTtcbi8vXG4vLyAgICAgLy8gV2F0Y2ggdGhlIHNvcnRpbmcgb2YgdGhlIGNvbnRlbnQgZWxlbWVudHMgaW4gdGhlIHBhZ2UgbW9kdWxlXG4vLyAgICAgLy8gVE9ETzogcmVxdWlyZShbJ2pxdWVyeScsICdqcXVlcnktdWkvZHJvcHBhYmxlJ10sICQgPT4gJCgnLnQzanMtcGFnZS1jZS1kcm9wem9uZS1hdmFpbGFibGUnKS5vbignZHJvcCcsICgpID0+IHRoaXMucmVmcmVzaCh0cnVlKSkpO1xuLy8gICB9XG4vLyB9XG5cbmNvbnNvbGUubG9nKDIzMzQ5KTtcbmV4cG9ydCBjbGFzcyBTZW1hbnRpbGl6ZXIge1xuICBjb25zdHJ1Y3Rvcih1cmw6IHN0cmluZywgZWxlbWVudElkOiBzdHJpbmcsIGNvbnRlbnRTZWxlY3RvcnM6IHN0cmluZ1tdKSB7XG4gICAgY29uc29sZS5sb2codXJsLCBlbGVtZW50SWQsIGNvbnRlbnRTZWxlY3RvcnMpO1xuICB9XG59XG4iXX0=
